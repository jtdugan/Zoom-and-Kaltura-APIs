# Retrieve information about video assets on Kaltura by Reference ID.
# A list of Reference IDs is read from a file.
#
import sys
import os
import requests
from datetime import datetime
#
# GLOBAL CONSTANTS
#
work_dir = "C:\\Users\\....\\Downloads" 
params_file_ref = "C:\\Users\\....\\Downloads\\TemporaryZoomParams.txt"
references_file_ref = "C:\\Users\\....\\Downloads\\ZoomRecsToKaltura.txt"
outfile_ref = "C:\\Users\\....\\Downloads\\TemporaryKalturaInfoByRef.txt"
outfile_header = ""
outfile_header += "KalturaReferenceID,Entries,EntryID,CreatedAt,CreatorID,OwnerID\n"
url_session_start = "https://www.kaltura.com/api_v3/service/session/action/start"
url_entries_ref = "https://www.kaltura.com/api_v3/service/baseentry/action/listByReferenceId"
json_format = {"format": "1"}
#
# FUNCTION DEFINITIONS
#

#
# CHECK FILES AND SET UP PARAMETERS
#
if not os.path.exists(work_dir):
    print ("Program ending because working directory does not exist.")
    sys.exit()
if not os.path.isfile(params_file_ref):
    print ("Program ending because input parameters files does not exist.")
    sys.exit()
if not os.path.isfile(references_file_ref):
    print ("Program ending because input users files does not exist.")
    sys.exit()
if os.path.exists(outfile_ref):
    os.remove(outfile_ref)
else:
    print ("A new output file will be created to hold the recording details.")

params_file = open(params_file_ref, "r")
line_count = 0
for params_line in params_file:
    line_count +=1
    if line_count == 5:
        params_partner = params_line.strip()
    elif line_count == 6:
        params_secret = params_line.strip()
    elif line_count == 7:
        params_user = params_line.strip()
params_file.close()
params_expiry = 14400
session_data = {"secret": params_secret}
session_data["expiry"] = params_expiry
session_data["partnerId"] = params_partner
session_data["type"] = 2
session_data["userId"] = params_user
#
# Obtain Token for subsequent queries
#
response = requests.post(url_session_start, data=session_data, params=json_format)
if (response.status_code) != 200:
    print (" Program ending due to non-200 web response.", response)
    sys.exit()
resp_dict = response.json()
if "code" in resp_dict:
    print ("Program ending because ",resp_dict["code"])
    sys.exit()
session_token = resp_dict
print ("Session token obtained.")
#
# Prep Input and output files
#
references_file = open(references_file_ref,"r")
outfile = open(outfile_ref, "w") # Open Output file for writing
outfile.write(outfile_header)
#
# LOOP Through Reference IDs and get info about each from Kaltura
#
ref_lines = references_file.readlines()
read_count = 0
for ref_line in ref_lines:
    read_count += 1
    ref_line = ref_line.split(",")
    ref_id_in_file = ref_line[0].strip()
    post_data = {"ks": session_token}
    post_data ["refId"] = ref_id_in_file
    print (read_count)
    response = response = requests.post(url_entries_ref, data=post_data, params=json_format)
    if (response.status_code) != 200:
        print (" Program ending due to non-200 web response.", response)
        sys.exit()
    resp_dict = response.json()
    if "code" in resp_dict:
        print ("Program ending because ",resp_dict["code"])
        sys.exit()
    entry_count = int(resp_dict["totalCount"])
    for i in range(0,entry_count):
        entry_details = resp_dict["objects"][i]
        outline = entry_details["referenceId"]
        outline += "," + str(entry_count)
        outline += "," + entry_details["id"]
        created_dt = datetime.fromtimestamp(entry_details["createdAt"])
        outline += "," + (datetime.strftime(created_dt, "%Y-%m-%d %H:%M:%S"))
        outline += "," + entry_details["creatorId"]
        outline += "," + entry_details["userId"]
        outline += "\n"
        outfile.write(outline)                 
#
# END PROGRAM
#
outfile.close()
references_file.close()
sys.exit()
